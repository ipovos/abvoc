{"version":3,"sources":["shared/chime.mp3","shared/positiveAlert.mp3","features/persistence.js","shared/utils.js","features/entities.js","components/atoms/Container.jsx","shared/styles.js","components/atoms/Tile.jsx","components/atoms/Mark.jsx","components/atoms/Input.jsx","components/molecules/SearchForm.jsx","components/atoms/Title.jsx","components/atoms/ProgressBar.jsx","components/atoms/Button.jsx","components/molecules/AppTile.jsx","components/molecules/DeckTile.jsx","components/molecules/NotFoundTile.jsx","components/organisms/DecksPage.jsx","components/molecules/RecordsList.jsx","components/molecules/RecordCreatingForm.jsx","components/organisms/DeckPage.jsx","components/molecules/TrainingForm.jsx","components/organisms/TrainingPage.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","exportData","data","dataString","encodeURIComponent","downloadAnchorElem","document","createElement","setAttribute","Date","toISOString","replace","click","calculatePercent","part","total","createID","Math","random","toString","createDeck","title","type","id","recordsIds","learnedRecordsIds","lastRepetition","nextRepetition","iteration","status","createRecord","firstSide","secondSide","deckId","createdAt","isRecordLearned","record","getRecordLearningProgress","min","getDeckLearningProgress","deckRecords","wordsIterationsInBoardsOfRemember","map","reduce","acc","number","length","Container","props","style","maxWidth","margin","padding","colors","Tile","noPadding","restProps","border","borderRadius","marginBottom","Mark","backgroundColor","Input","display","width","boxSizing","fontSize","lineHeight","borderBottom","SearchForm","caption","validationError","otherProps","placeholder","color","Title","children","getBackgroundColor","percent","colored","getProgressColor","ProgressBar","height","transition","Button","look","wide","mainStyle","cursor","purpleStyle","fontWeight","background","fontStyle","AppTile","fileInput","React","createRef","onFileChange","event","files","target","reader","readAsText","onDataImportButtonClick","current","this","FileReader","onload","result","onDataImport","appData","onDataExport","onDataReset","decksCount","learnedDecksCount","recordsCount","learnedRecordsCount","ref","accept","onChange","hidden","justifyContent","htmlFor","onClick","flexWrap","Component","DeckTile","deck","records","pageChangeCaption","onPageChange","onDeckDelete","NotFoundTile","DecksPage","state","hasValidationError","query","onQueryChange","normalizedQuery","normalizeQuery","value","validateQuery","setState","rawQuery","trim","console","log","JSON","parse","onDeckCreate","onSearchKeyUp","keyCode","getFilteredDecks","decks","filter","toLowerCase","includes","getRecordsByDeckId","filteredDecks","onKeyUp","key","RecordsList","list","onRecordDelete","listStyle","i","flex","alignItems","marginLeft","RecordCreatingForm","onInputChange","name","onInputKeyUp","onRecordCreate","initialFirstSide","isDisabled","autoFocus","disabled","DeckPage","isRecordCreating","startRecordCreating","finishRecordCreating","getFilteredRecords","sort","a","b","createrAt","filteredRecords","opacity","TrainingForm","onValueChange","onSuccess","getProgressPercent","targetValue","normalizedTargetValue","normalizeValue","normalizedValue","startsWith","prevProps","progressPercent","marginTop","TrainingPage","isFinished","currentRecordIndex","recordSuccessAudio","trainingSuccessAudio","onSuccessInput","nextRecord","finishTraining","playRecordSuccessAudio","playTrainingSuccessAudio","onFinishTraining","playAudio","audio","pause","currentTime","play","role","aria-label","position","src","chime","positiveAlert","href","rel","App","emptyVocabulary","decksById","recordsById","page","pageParams","changePage","importData","stringify","resetData","newDeck","prevState","deleteDeck","restDecksById","recordsByIdCopy","forEach","recordId","getRecordsByIdWithoutDeck","getLearnedRecordsByDeckId","newRecord","concat","deleteRecord","restRecordsById","updateRecords","updatedRecords","prevLearnedRecordsCount","learnedRecordsCountChange","learnedUpdatedRecordsIds","updatedRecordsById","Object","fromEntries","newRecordsById","newDecksById","prevLearnedRecordsIds","learnedRecordId","hasNewLearnedDeck","Promise","resolve","reject","persistedString","localStorage","getItem","then","setItem","router","params","values","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc94e952.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chime.129e9c15.mp3\";","module.exports = __webpack_public_path__ + \"static/media/positiveAlert.6b46dda4.mp3\";","const LOCALSTORAGE_KEY = 'abvoc/state';\n\n/**\n *\n * @param {string} data\n */\nexport const exportData = (data) => {\n  const dataString =\n    'data:text/json;charset=utf-8,' +\n    encodeURIComponent(data);\n\n  const downloadAnchorElem = document.createElement('a');\n  downloadAnchorElem.setAttribute('href', dataString);\n  downloadAnchorElem.setAttribute(\n    'download',\n    `vocabulary-${new Date()\n      .toISOString()\n      .replace(/:/g, '_')}.json`,\n  );\n  downloadAnchorElem.click();\n};\n\n/**\n *\n * @param {string} data\n */\nexport const persistData = (data) => {\n  localStorage.setItem(LOCALSTORAGE_KEY, data);\n};\n\nexport const restoreData = () => {\n  return new Promise((resolve, reject) => {\n    const persistedString = localStorage.getItem(\n      LOCALSTORAGE_KEY,\n    );\n\n    if (!persistedString) {\n      reject();\n    }\n\n    resolve(persistedString);\n  });\n};\n","export const calculatePercent = (part, total) => {\n  return (part / total) * 100;\n};\n\nexport const createID = () => {\n  return `f${(~~(Math.random() * 1e8)).toString(16)}`;\n};\n","import {\n  createID,\n  calculatePercent,\n} from '../shared/utils';\n\nconst REMEMBER_ITERATIONS = 5;\n\nexport const createDeck = (title) => {\n  return {\n    title,\n    type: 'deck',\n    id: createID(),\n    recordsIds: [],\n    learnedRecordsIds: [],\n    lastRepetition: null,\n    nextRepetition: null,\n    iteration: 0,\n    status: 'inProgress',\n  };\n};\n\nexport const createRecord = ({\n  firstSide,\n  secondSide,\n  deckId,\n}) => {\n  return {\n    firstSide,\n    secondSide,\n    deckId,\n    id: createID(),\n    lastRepetition: null,\n    nextRepetition: null,\n    createdAt: new Date().toISOString(),\n    iteration: 0,\n  };\n};\n\nexport const isRecordLearned = (record) => {\n  return record.iteration > REMEMBER_ITERATIONS;\n};\n\nexport const isDeckLearned = (deck) => {\n  return false;\n};\n\nexport const getRecordLearningProgress = (record) => {\n  return calculatePercent(\n    Math.min(record.iteration, REMEMBER_ITERATIONS),\n    REMEMBER_ITERATIONS,\n  );\n};\n\nexport const getDeckLearningProgress = (deckRecords) => {\n  const wordsIterationsInBoardsOfRemember = deckRecords\n    .map((record) =>\n      Math.min(record.iteration, REMEMBER_ITERATIONS),\n    )\n    .reduce((acc, number) => acc + number, 0);\n\n  return calculatePercent(\n    wordsIterationsInBoardsOfRemember,\n    deckRecords.length * REMEMBER_ITERATIONS,\n  );\n};\n","import React from 'react';\n\nexport const Container = (props) => {\n  return (\n    <div\n      {...props}\n      style={{\n        maxWidth: '60em',\n        margin: '0 auto',\n        padding: '1em 1em 0',\n      }}\n    />\n  );\n};\n","export const colors = {\n  purple: 'hsl(269, 97%, 35%)',\n  purpleLight: 'hsl(269, 96%, 90%)',\n  violet: 'hsl(257, 46%, 59%)',\n  violetLight: 'hsl(256, 48%, 94%)',\n  green: 'hsl(138, 76%, 31%)',\n  greenLight: 'hsl(138, 77%, 90%)',\n  mustard: 'hsl(49, 88%, 62%)',\n  mustardLight: 'hsl(50, 86%, 94%)',\n  red: 'hsl(358, 98%, 54%)',\n  redLight: 'hsl(358, 100%, 93%)',\n};\n","import React from 'react';\n\nimport { colors } from '../../shared/styles';\n\nexport const Tile = ({ noPadding, ...restProps }) => {\n  return (\n    <article\n      {...restProps}\n      style={{\n        border: `1px solid ${colors.violet}`,\n        padding: noPadding ? 0 : '1.3em',\n        borderRadius: '1.3em',\n        marginBottom: '1em',\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { colors } from '../../shared/styles';\n\nexport const Mark = (props) => {\n  return (\n    <mark\n      {...props}\n      style={{ backgroundColor: colors.mustard }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { colors } from '../../shared/styles';\n\nexport const Input = ({ type = 'text', ...restProps }) => {\n  return (\n    <input\n      type={type}\n      {...restProps}\n      style={{\n        display: 'block',\n        width: '100%',\n        boxSizing: 'border-box',\n        fontSize: '1em',\n        lineHeight: 2,\n        border: 'none',\n        borderBottom: `1px solid ${colors.violet}`,\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Input } from '../atoms/Input';\n\nimport { colors } from '../../shared/styles';\n\nexport const SearchForm = ({\n  caption,\n  validationError,\n  ...otherProps\n}) => {\n  return (\n    <>\n      <div>\n        <i>{caption}</i>\n      </div>\n      <br />\n      <Input\n        type=\"text\"\n        placeholder=\"type here...\"\n        {...otherProps}\n      />\n      <br />\n      {validationError?.length > 0 ? (\n        <div style={{ color: colors.red }}>\n          <i>{validationError}</i>\n        </div>\n      ) : (\n        <br />\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Title = ({ children, ...restProps }) => {\n  return (\n    <h1\n      {...restProps}\n      style={{\n        margin: '0',\n        fontSize: '1em',\n        lineHeight: 1.5,\n      }}\n    >\n      {children}\n    </h1>\n  );\n};\n","import React from 'react';\n\nimport { colors } from '../../shared/styles';\n\nconst getBackgroundColor = (percent, colored) => {\n  if (!colored) {\n    return colors.purpleLight;\n  }\n\n  if (percent < 33) {\n    return colors.redLight;\n  }\n\n  if (percent < 66) {\n    return colors.mustardLight;\n  }\n\n  return colors.greenLight;\n};\n\nconst getProgressColor = (percent, colored) => {\n  if (!colored) {\n    return colors.purple;\n  }\n\n  if (percent < 33) {\n    return colors.red;\n  }\n\n  if (percent < 66) {\n    return colors.mustard;\n  }\n\n  return colors.green;\n};\n\nexport const ProgressBar = ({\n  percent,\n  height = '2px',\n  colored = false,\n}) => {\n  return (\n    <div\n      style={{\n        height,\n        backgroundColor: getBackgroundColor(\n          percent,\n          colored,\n        ),\n      }}\n    >\n      <div\n        style={{\n          height,\n          backgroundColor: getProgressColor(\n            percent,\n            colored,\n          ),\n          width: `${Math.min(percent, 100)}%`,\n          transition: 'width .1s ease-in-out'\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { colors } from '../../shared/styles';\n\nexport const Button = ({\n  look,\n  wide = false,\n  type = 'button',\n  ...restProps\n}) => {\n  const mainStyle = {\n    display: 'inline-block',\n    width: wide ? '100%' : 'initial',\n    fontSize: '1em',\n    borderRadius: '1.3em',\n    border: `1px solid ${colors.violet}`,\n    color: colors.purple,\n    padding: '0.65em 1.3em',\n    backgroundColor: colors.violetLight,\n    cursor: 'pointer',\n  };\n\n  const purpleStyle = {\n    padding: '1em',\n    fontWeight: 700,\n    background: `linear-gradient(30deg, ${colors.purple} 30%, ${colors.violet} 100%)`,\n    color: '#fff',\n    fontStyle: 'italic',\n  };\n\n  return (\n    <button\n      {...restProps}\n      type={type}\n      style={{\n        ...mainStyle,\n        ...(look === 'purple' ? purpleStyle : {}),\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Tile } from '../atoms/Tile';\nimport { Title } from '../atoms/Title';\nimport { ProgressBar } from '../atoms/ProgressBar';\n\nimport { calculatePercent } from '../../shared/utils';\nimport { Button } from '../atoms/Button';\n\nexport class AppTile extends React.Component {\n  fileInput = React.createRef();\n\n  componentDidMount() {\n    this.reader = new FileReader();\n    this.reader.onload = (event) => {\n      const { result } = event.target;\n      const { onDataImport } = this.props;\n\n      onDataImport(result);\n    };\n  }\n\n  onFileChange = (event) => {\n    const { files } = event.target;\n\n    if (files.length > 0) {\n      this.reader.readAsText(files[0]);\n    }\n  };\n\n  onDataImportButtonClick = () => {\n    this.fileInput.current.click();\n  };\n\n  render() {\n    const {\n      appData,\n      onDataExport,\n      onDataReset,\n    } = this.props;\n\n    const {\n      decksCount,\n      learnedDecksCount,\n      recordsCount,\n      learnedRecordsCount,\n    } = appData;\n\n    if (decksCount === 0) {\n      return (\n        <Tile>\n          <Title>Abvoc</Title>\n          <p>\n            <i>Vocabulary is empty</i>\n          </p>\n          <input\n            ref={this.fileInput}\n            id=\"fileInput\"\n            type=\"file\"\n            accept=\"application/JSON\"\n            onChange={this.onFileChange}\n            hidden\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <Button\n              htmlFor=\"fileInput\"\n              onClick={this.onDataImportButtonClick}\n              look=\"purple\"\n              wide\n            >\n              Import vocabulary\n            </Button>\n          </div>\n        </Tile>\n      );\n    }\n\n    return (\n      <Tile>\n        <Title>Abvoc</Title>\n        <ProgressBar\n          percent={calculatePercent(\n            learnedRecordsCount,\n            recordsCount,\n          )}\n        />\n        <p>\n          {learnedDecksCount}/{decksCount} decks learned\n        </p>\n        <p>\n          {learnedRecordsCount}/{recordsCount} records\n          learned\n        </p>\n\n        <input\n          ref={this.fileInput}\n          id=\"fileInput\"\n          type=\"file\"\n          accept=\"application/JSON\"\n          onChange={this.onFileChange}\n          hidden\n        />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            flexWrap: 'wrap',\n          }}\n        >\n          <Button\n            htmlFor=\"fileInput\"\n            onClick={this.onDataImportButtonClick}\n          >\n            Import vocabulary\n          </Button>\n          <Button onClick={onDataExport}>\n            Export vocabulary\n          </Button>\n          <Button onClick={onDataReset}>Reset</Button>\n        </div>\n      </Tile>\n    );\n  }\n}\n","import React from 'react';\n\nimport { getDeckLearningProgress } from '../../features/entities';\n\nimport { Tile } from '../atoms/Tile';\nimport { Title } from '../atoms/Title';\nimport { ProgressBar } from '../atoms/ProgressBar';\nimport { Button } from '../atoms/Button';\n\nexport const DeckTile = ({\n  deck,\n  records,\n  pageChangeCaption,\n  onPageChange,\n  onDeckDelete,\n}) => {\n  const { title, recordsIds, learnedRecordsIds } = deck;\n\n  return (\n    <Tile>\n      <Title>{title}</Title>\n      <ProgressBar\n        percent={getDeckLearningProgress(records)}\n      />\n      <p>\n        {learnedRecordsIds.length}/{recordsIds.length}{' '}\n        records learned\n      </p>\n      <p>Learning in progress</p>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Button onClick={onPageChange}>\n          {pageChangeCaption}\n        </Button>\n        <Button onClick={() => onDeckDelete(deck)}>\n          Delete\n        </Button>\n      </div>\n    </Tile>\n  );\n};\n","import React from 'react';\n\nimport { Tile } from '../atoms/Tile';\n\nexport const NotFoundTile = ({ caption }) => {\n  return (\n    <Tile>\n      <div>{caption}</div>\n      {/* <br />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Button>add record</Button>\n        <Button>add set</Button>\n      </div> */}\n    </Tile>\n  );\n};\n","import React from 'react';\n\nimport { Container } from '../atoms/Container';\nimport { Tile } from '../atoms/Tile';\nimport { Mark } from '../atoms/Mark';\n\nimport { SearchForm } from '../molecules/SearchForm';\nimport { AppTile } from '../molecules/AppTile';\nimport { DeckTile } from '../molecules/DeckTile';\nimport { NotFoundTile } from '../molecules/NotFoundTile';\nimport { Button } from '../atoms/Button';\n\nexport class DecksPage extends React.Component {\n  state = {\n    hasValidationError: false,\n    validationError: '',\n    query: '',\n  };\n\n  onQueryChange = (event) => {\n    const normalizedQuery = this.normalizeQuery(\n      event.target.value,\n    );\n    const hasValidationError = this.validateQuery(\n      normalizedQuery,\n    );\n\n    this.setState({\n      hasValidationError,\n      query: normalizedQuery,\n      validationError: hasValidationError\n        ? 'need more letters'\n        : '',\n    });\n  };\n\n  normalizeQuery = (rawQuery) => {\n    return rawQuery.trim();\n  };\n\n  validateQuery = (query) => {\n    return query.length > 0 && query.length < 2;\n  };\n\n  onFileChange = (event) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      console.log(JSON.parse(event.target.result));\n    };\n\n    if (event.target.files.length > 0) {\n      reader.readAsText(event.target.files[0]);\n    }\n  };\n\n  onDeckCreate = () => {\n    this.props.onDeckCreate(this.state.query);\n    this.setState({\n      hasValidationError: false,\n      validationError: '',\n      query: '',\n    });\n  };\n\n  onSearchKeyUp = (event) => {\n    if (\n      event.keyCode === 13 &&\n      !this.state.hasValidationError &&\n      this.state.query.length > 0 &&\n      this.getFilteredDecks().length === 0\n    ) {\n      this.onDeckCreate();\n    }\n  };\n\n  getFilteredDecks = () => {\n    const { hasValidationError, query } = this.state;\n    const { decks } = this.props;\n\n    if (hasValidationError) {\n      return decks;\n    }\n\n    return decks.filter((deck) => {\n      return deck.title\n        .toLowerCase()\n        .includes(query.toLowerCase());\n    });\n  };\n\n  render() {\n    const {\n      appData,\n      onPageChange,\n      onDataImport,\n      onDataExport,\n      onDataReset,\n      onDeckDelete,\n      getRecordsByDeckId,\n    } = this.props;\n    const { validationError, query } = this.state;\n    const filteredDecks = this.getFilteredDecks();\n\n    return (\n      <Container>\n        <AppTile\n          appData={appData}\n          onDataImport={onDataImport}\n          onDataExport={onDataExport}\n          onDataReset={onDataReset}\n        />\n\n        <Tile>\n          <SearchForm\n            caption=\"to search or create decks\"\n            value={query}\n            onChange={this.onQueryChange}\n            onKeyUp={this.onSearchKeyUp}\n            validationError={validationError}\n          />\n        </Tile>\n\n        {filteredDecks.length === 0 && query.length > 0 && (\n          <NotFoundTile\n            caption={\n              <>\n                <div>\n                  oops, no “<Mark>{query}</Mark>\n                  ”-containing decks found\n                </div>\n                <br />\n                <Button onClick={this.onDeckCreate}>\n                  Create “{query}” deck\n                </Button>\n              </>\n            }\n          />\n        )}\n\n        {filteredDecks.map((deck) => (\n          <DeckTile\n            key={deck.id}\n            deck={deck}\n            records={getRecordsByDeckId(deck.id)}\n            pageChangeCaption=\"See deck\"\n            onPageChange={() =>\n              onPageChange('deck', {\n                deckId: deck.id,\n              })\n            }\n            onDeckDelete={onDeckDelete}\n          />\n        ))}\n      </Container>\n    );\n  }\n}\n","import React from 'react';\n\nimport { getRecordLearningProgress } from '../../features/entities';\n\nimport { ProgressBar } from '../atoms/ProgressBar';\nimport { Button } from '../atoms/Button';\n\nimport { colors } from '../../shared/styles';\n\nexport const RecordsList = ({ list, onRecordDelete }) => {\n  return (\n    <ul\n      style={{ listStyle: 'none', padding: 0, margin: 0 }}\n    >\n      {list.map((record, i) => (\n        <li\n          key={record.id}\n          style={{\n            padding: '1em',\n            borderBottom:\n              i === list.length - 1\n                ? null\n                : `1px solid ${colors.violet}`,\n          }}\n        >\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: '1 1 auto' }}>\n              <p style={{ margin: 0, lineHeight: '1.5' }}>\n                <b>{record.firstSide}</b>\n              </p>\n              <ProgressBar\n                percent={getRecordLearningProgress(record)}\n              />\n              <p style={{ margin: 0, lineHeight: '1.5' }}>\n                {record.secondSide}\n              </p>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginLeft: '1em',\n              }}\n            >\n              <Button\n                onClick={() => onRecordDelete(record)}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\nimport { Input } from '../atoms/Input';\nimport { Button } from '../atoms/Button';\n\nexport class RecordCreatingForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstSide: props.initialFirstSide,\n      secondSide: '',\n    };\n  }\n\n  onInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  onInputKeyUp = (event) => {\n    if (\n      event.keyCode === 13 &&\n      this.state.firstSide.length > 0 &&\n      this.state.secondSide.length > 0\n    ) {\n      this.createRecord();\n    }\n  };\n\n  createRecord = () => {\n    const { firstSide, secondSide } = this.state;\n    this.props.onRecordCreate({ firstSide, secondSide });\n  };\n\n  render() {\n    const { firstSide, secondSide } = this.state;\n    const isDisabled =\n      firstSide.length === 0 || secondSide.length === 0;\n\n    return (\n      <>\n        <div>\n          <i>create record</i>\n        </div>\n        <br />\n        <label\n          style={{ display: 'block' }}\n          htmlFor=\"firstSide\"\n        >\n          First side\n        </label>\n        <Input\n          type=\"text\"\n          placeholder=\"type here...\"\n          name=\"firstSide\"\n          id=\"firstSide\"\n          value={firstSide}\n          onChange={this.onInputChange}\n          onKeyUp={this.onInputKeyUp}\n        />\n        <br />\n        <label\n          style={{ display: 'block' }}\n          htmlFor=\"secondSide\"\n        >\n          Second side\n        </label>\n        <Input\n          type=\"text\"\n          placeholder=\"type here...\"\n          name=\"secondSide\"\n          id=\"secondSide\"\n          value={secondSide}\n          onChange={this.onInputChange}\n          onKeyUp={this.onInputKeyUp}\n          autoFocus\n        />\n        <br />\n        <div>\n          <Button\n            disabled={isDisabled}\n            onClick={this.createRecord}\n          >\n            Create record\n          </Button>\n        </div>\n        {isDisabled ? (\n          <>\n            <br />\n            <div>\n              <i>enter first and second side</i>\n            </div>\n          </>\n        ) : (\n          <br />\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Container } from '../atoms/Container';\nimport { Tile } from '../atoms/Tile';\nimport { Button } from '../atoms/Button';\nimport { Mark } from '../atoms/Mark';\n\nimport { SearchForm } from '../molecules/SearchForm';\nimport { RecordsList } from '../molecules/RecordsList';\n\nimport { NotFoundTile } from '../molecules/NotFoundTile';\nimport { DeckTile } from '../molecules/DeckTile';\nimport { RecordCreatingForm } from '../molecules/RecordCreatingForm';\n\nexport class DeckPage extends React.Component {\n  state = {\n    hasValidationError: false,\n    validationError: '',\n    query: '',\n\n    isRecordCreating: false,\n  };\n\n  onQueryChange = (event) => {\n    const normalizedQuery = this.normalizeQuery(\n      event.target.value,\n    );\n    const hasValidationError = this.validateQuery(\n      normalizedQuery,\n    );\n\n    this.setState({\n      hasValidationError,\n      query: normalizedQuery,\n      validationError: hasValidationError\n        ? 'need more letters'\n        : '',\n\n      isRecordCreating: false,\n    });\n  };\n\n  normalizeQuery = (rawQuery) => {\n    return rawQuery.trim();\n  };\n\n  validateQuery = (query) => {\n    return query.length > 0 && query.length < 2;\n  };\n\n  startRecordCreating = () => {\n    this.setState({ isRecordCreating: true });\n  };\n\n  finishRecordCreating = () => {\n    this.setState({\n      hasValidationError: false,\n      query: '',\n      validationError: '',\n\n      isRecordCreating: false,\n    });\n  };\n\n  createRecord = ({ firstSide, secondSide }) => {\n    this.props.onRecordCreate({\n      firstSide,\n      secondSide,\n      deckId: this.props.deck.id,\n    });\n    this.finishRecordCreating();\n  };\n\n  onSearchKeyUp = (event) => {\n    if (\n      event.keyCode === 13 &&\n      !this.state.hasValidationError &&\n      this.state.query.length > 0 &&\n      !this.state.isRecordCreating &&\n      this.getFilteredRecords().length === 0\n    ) {\n      this.startRecordCreating();\n    }\n  };\n\n  getFilteredRecords = () => {\n    const { hasValidationError, query } = this.state;\n    const { records } = this.props;\n\n    if (hasValidationError) {\n      return records;\n    }\n\n    return records\n      .filter((record) => {\n        return (\n          record.firstSide\n            .toLowerCase()\n            .includes(query.toLowerCase()) ||\n          record.secondSide\n            .toLowerCase()\n            .includes(query.toLowerCase())\n        );\n      })\n      .sort((a, b) => {\n        if (a.createrAt < b.createdAt) {\n          return 1;\n        }\n\n        return -1;\n      });\n  };\n\n  render() {\n    const {\n      deck,\n      records,\n      onPageChange,\n      onDeckDelete,\n      onRecordDelete,\n    } = this.props;\n    const {\n      validationError,\n      query,\n      isRecordCreating,\n    } = this.state;\n    const filteredRecords = this.getFilteredRecords();\n\n    return (\n      <Container>\n        <DeckTile\n          deck={deck}\n          records={records}\n          pageChangeCaption=\"Back\"\n          onPageChange={() => onPageChange('decks', null)}\n          onDeckDelete={(deck) => {\n            onPageChange('decks', null);\n            onDeckDelete(deck);\n          }}\n        />\n        <p\n          style={{\n            opacity: records.length === 0 ? 0.5 : 1,\n          }}\n        >\n          <Button\n            wide\n            look=\"purple\"\n            onClick={() =>\n              onPageChange('training', { deckId: deck.id })\n            }\n            disabled={records.length === 0}\n          >\n            train\n          </Button>\n        </p>\n        <Tile>\n          <SearchForm\n            caption=\"to search or create records\"\n            value={query}\n            onChange={this.onQueryChange}\n            validationError={validationError}\n            onKeyUp={this.onSearchKeyUp}\n          />\n        </Tile>\n\n        {filteredRecords.length === 0 && query.length > 0 && (\n          <NotFoundTile\n            caption={\n              <>\n                {!isRecordCreating && (\n                  <>\n                    <div>\n                      oops, no “<Mark>{query}</Mark>\n                      ”-containing records found\n                    </div>\n                    <br />\n                  </>\n                )}\n                {isRecordCreating ? (\n                  <RecordCreatingForm\n                    initialFirstSide={query}\n                    onRecordCreate={this.createRecord}\n                  />\n                ) : (\n                  <Button\n                    onClick={this.startRecordCreating}\n                  >\n                    Create “{query}” record\n                  </Button>\n                )}\n              </>\n            }\n          />\n        )}\n\n        {filteredRecords.length > 0 && (\n          <Tile noPadding>\n            <RecordsList\n              list={filteredRecords}\n              onRecordDelete={onRecordDelete}\n            />\n          </Tile>\n        )}\n      </Container>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Input } from '../atoms/Input';\n\nimport { ProgressBar } from '../atoms/ProgressBar';\n\nimport { calculatePercent } from '../../shared/utils';\n\nexport class TrainingForm extends React.Component {\n  state = {\n    value: '',\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.targetValue === this.props.targetValue) {\n      return;\n    }\n\n    this.setState({ value: '' });\n  }\n\n  onValueChange = (event) => {\n    const { value } = event.target;\n    const { onSuccess } = this.props;\n\n    if (this.getProgressPercent(value) === 100) {\n      onSuccess();\n    }\n\n    this.setState({ value });\n  };\n\n  getProgressPercent = (value) => {\n    const { targetValue } = this.props;\n\n    const normalizedTargetValue = this.normalizeValue(\n      targetValue,\n    );\n    const normalizedValue = this.normalizeValue(value);\n\n    if (\n      !normalizedTargetValue.startsWith(normalizedValue)\n    ) {\n      return 0;\n    }\n\n    return calculatePercent(\n      normalizedValue.length,\n      normalizedTargetValue.length,\n    );\n  };\n\n  normalizeValue = (value = '') => {\n    return value.toLowerCase();\n  };\n\n  render() {\n    const {\n      caption,\n      targetValue,\n      onSuccess,\n      ...otherProps\n    } = this.props;\n    const { value } = this.state;\n\n    const progressPercent = this.getProgressPercent(value);\n\n    return (\n      <>\n        <div>\n          <i>{caption}</i>\n        </div>\n        <br />\n        <Input\n          type=\"text\"\n          placeholder=\"type here...\"\n          value={value}\n          onChange={this.onValueChange}\n          autoFocus\n          {...otherProps}\n        />\n        <br />\n        <div style={{ marginTop: '2px' }}>\n          <ProgressBar\n            percent={progressPercent}\n            height=\"5px\"\n            colored\n          />\n        </div>\n        <br />\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Container } from '../atoms/Container';\nimport { Tile } from '../atoms/Tile';\nimport { Title } from '../atoms/Title';\nimport { ProgressBar } from '../atoms/ProgressBar';\nimport { Button } from '../atoms/Button';\n\nimport { TrainingForm } from '../molecules/TrainingForm';\n\nimport { calculatePercent } from '../../shared/utils';\nimport chime from '../../shared/chime.mp3';\nimport positiveAlert from '../../shared/positiveAlert.mp3';\n\nexport class TrainingPage extends React.Component {\n  state = {\n    isFinished: false,\n    currentRecordIndex: 0,\n  };\n\n  recordSuccessAudio = React.createRef();\n  trainingSuccessAudio = React.createRef();\n\n  onSuccessInput = () => {\n    const { records } = this.props;\n    const { currentRecordIndex } = this.state;\n\n    if (currentRecordIndex === records.length - 1) {\n      this.finishTraining();\n      return;\n    }\n\n    this.nextRecord();\n  };\n\n  nextRecord = () => {\n    this.playRecordSuccessAudio();\n    this.setState((state) => ({\n      currentRecordIndex: state.currentRecordIndex + 1,\n    }));\n  };\n\n  finishTraining = () => {\n    this.playTrainingSuccessAudio();\n    this.setState((state) => ({\n      isFinished: true,\n      currentRecordIndex: state.currentRecordIndex + 1,\n    }));\n    this.props.onFinishTraining(\n      this.props.deck,\n      this.props.records,\n    );\n  };\n\n  playRecordSuccessAudio = () => {\n    this.playAudio(this.recordSuccessAudio.current);\n  };\n\n  playTrainingSuccessAudio = () => {\n    this.playAudio(this.trainingSuccessAudio.current);\n  };\n\n  playAudio = (audio) => {\n    audio.pause();\n    audio.currentTime = 0;\n    audio.play();\n  };\n\n  render() {\n    const { deck, records, onPageChange } = this.props;\n    const { isFinished, currentRecordIndex } = this.state;\n\n    return (\n      <Container>\n        <Tile>\n          <Title>{deck.title}</Title>\n          <ProgressBar\n            percent={calculatePercent(\n              currentRecordIndex,\n              records.length,\n            )}\n          />\n          <br />\n\n          {!isFinished && (\n            <>\n              <div>\n                {currentRecordIndex}/{records.length}{' '}\n                records learned\n              </div>\n              <br />\n            </>\n          )}\n          <Button\n            onClick={() =>\n              onPageChange('deck', { deckId: deck.id })\n            }\n          >\n            Back\n          </Button>\n        </Tile>\n\n        {!isFinished ? (\n          <>\n            <Tile>\n              <Title>\n                {records[currentRecordIndex].firstSide}\n              </Title>\n            </Tile>\n            <Tile>\n              <TrainingForm\n                caption=\"enter translation of the record above\"\n                targetValue={\n                  records[currentRecordIndex].secondSide\n                }\n                onSuccess={this.onSuccessInput}\n              />\n            </Tile>\n          </>\n        ) : (\n          <Tile>\n            <Title>\n              Congratulations! Training finished{' '}\n              <span role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            </Title>\n          </Tile>\n        )}\n\n        <div style={{ position: 'absolute' }}>\n          <video\n            ref={this.recordSuccessAudio}\n            src={chime}\n          />\n          <video\n            ref={this.trainingSuccessAudio}\n            src={positiveAlert}\n          />\n        </div>\n        <p>\n          Sound effects obtained from{' '}\n          <a\n            href=\"https://www.zapsplat.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            https://www.zapsplat.com\n          </a>\n        </p>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\n\nimport {\n  exportData,\n  persistData,\n  restoreData,\n} from '../features/persistence';\nimport {\n  createDeck,\n  createRecord,\n  isDeckLearned,\n  isRecordLearned,\n} from '../features/entities';\n\nimport { DecksPage } from './organisms/DecksPage';\nimport { DeckPage } from './organisms/DeckPage';\nimport { TrainingPage } from './organisms/TrainingPage';\n\nexport class App extends React.Component {\n  emptyVocabulary = {\n    appData: {\n      decksCount: 0,\n      learnedDecksCount: 0,\n      recordsCount: 0,\n      learnedRecordsCount: 0,\n    },\n    // for the sake of search\n    decksById: {},\n    recordsById: {},\n  };\n\n  state = {\n    page: 'decks',\n    pageParams: null,\n\n    ...this.emptyVocabulary,\n  };\n\n  componentDidMount() {\n    restoreData().then(this.importData);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { appData, decksById, recordsById } = this.state;\n\n    if (\n      appData === prevState.appData &&\n      decksById === prevState.decksById &&\n      recordsById === prevState.recordsById\n    ) {\n      return;\n    }\n\n    persistData(\n      JSON.stringify({\n        appData,\n        decksById,\n        recordsById,\n      }),\n    );\n  }\n\n  changePage = (page, pageParams) => {\n    this.setState({ page, pageParams });\n  };\n\n  importData = (data) => {\n    this.setState(JSON.parse(data));\n  };\n\n  exportData = () => {\n    const { appData, decksById, recordsById } = this.state;\n\n    exportData(\n      JSON.stringify({\n        appData,\n        decksById,\n        recordsById,\n      }),\n    );\n  };\n\n  resetData = () => {\n    this.setState(this.emptyVocabulary);\n  };\n\n  createDeck = (title) => {\n    const newDeck = createDeck(title);\n\n    this.setState((prevState) => {\n      return {\n        appData: {\n          ...prevState.appData,\n          decksCount: prevState.appData.decksCount + 1,\n        },\n        decksById: {\n          ...prevState.decksById,\n          [newDeck.id]: newDeck,\n        },\n      };\n    });\n  };\n\n  deleteDeck = (deck) => {\n    this.setState((prevState) => {\n      const {\n        [deck.id]: deletedDeck,\n        ...restDecksById\n      } = prevState.decksById;\n\n      const getRecordsByIdWithoutDeck = () => {\n        const recordsByIdCopy = {\n          ...prevState.recordsById,\n        };\n\n        deck.recordsIds.forEach((recordId) => {\n          delete recordsByIdCopy[recordId];\n        });\n\n        return recordsByIdCopy;\n      };\n\n      return {\n        appData: {\n          ...prevState.appData,\n\n          decksCount: prevState.appData.decksCount - 1,\n          learnedDecksCount: isDeckLearned(deck)\n            ? prevState.appData.learnedDecksCount - 1\n            : prevState.appData.learnedDecksCount,\n\n          recordsCount:\n            prevState.appData.recordsCount -\n            deck.recordsIds.length,\n          learnedRecordsCount:\n            prevState.appData.learnedRecordsCount -\n            deck.learnedRecordsIds.length,\n        },\n        decksById: restDecksById,\n        recordsById: getRecordsByIdWithoutDeck(),\n      };\n    });\n  };\n\n  getRecordsByDeckId = (deckId) => {\n    const { recordsIds } = this.state.decksById[deckId];\n\n    return recordsIds.map(\n      (recordId) => this.state.recordsById[recordId],\n    );\n  };\n\n  getLearnedRecordsByDeckId = (deckId) => {\n    const { learnedRecordsIds } = this.state.decksById[\n      deckId\n    ];\n\n    return learnedRecordsIds.map(\n      (recordId) => this.state.recordsById[recordId],\n    );\n  };\n\n  createRecord = ({ firstSide, secondSide, deckId }) => {\n    const newRecord = createRecord({\n      firstSide,\n      secondSide,\n      deckId,\n    });\n\n    this.setState((prevState) => {\n      return {\n        appData: {\n          ...prevState.appData,\n          recordsCount: prevState.appData.recordsCount + 1,\n        },\n        decksById: {\n          ...prevState.decksById,\n          [deckId]: {\n            ...prevState.decksById[deckId],\n\n            recordsIds: prevState.decksById[\n              deckId\n            ].recordsIds.concat([newRecord.id]),\n          },\n        },\n        recordsById: {\n          ...prevState.recordsById,\n          [newRecord.id]: newRecord,\n        },\n      };\n    });\n  };\n\n  deleteRecord = (record) => {\n    this.setState((prevState) => {\n      const { deckId } = record;\n\n      const {\n        [record.id]: deletedRecord,\n        ...restRecordsById\n      } = prevState.recordsById;\n\n      return {\n        appData: {\n          ...prevState.appData,\n          recordsCount: prevState.appData.recordsCount - 1,\n          learnedRecordsCount: isRecordLearned(record)\n            ? prevState.appData.learnedRecordsCount - 1\n            : prevState.appData.learnedRecordsCount,\n        },\n        decksById: {\n          ...prevState.decksById,\n          [deckId]: {\n            ...prevState.decksById[deckId],\n\n            recordsIds: prevState.decksById[\n              deckId\n            ].recordsIds.filter((id) => id !== record.id),\n            learnedRecordsIds: prevState.decksById[\n              deckId\n            ].learnedRecordsIds.filter(\n              (id) => id !== record.id,\n            ),\n          },\n        },\n        recordsById: restRecordsById,\n      };\n    });\n  };\n\n  updateRecords = (deck, records) => {\n    const updatedRecords = records.map((record) => ({\n      ...record,\n      lastRepetition: new Date().toISOString(),\n      iteration: record.iteration + 1,\n    }));\n\n    const prevLearnedRecordsCount = records.filter(\n      isRecordLearned,\n    ).length;\n    const learnedRecordsCount = updatedRecords.filter(\n      isRecordLearned,\n    ).length;\n\n    const learnedRecordsCountChange =\n      learnedRecordsCount - prevLearnedRecordsCount;\n\n    const learnedUpdatedRecordsIds = updatedRecords\n      .filter(isRecordLearned)\n      .map((record) => record.id);\n\n    const updatedRecordsById = Object.fromEntries(\n      updatedRecords.map((record) => [record.id, record]),\n    );\n\n    this.setState((prevState) => {\n      const newRecordsById = {\n        ...prevState.recordsById,\n        ...updatedRecordsById,\n      };\n\n      const newDecksById = {\n        ...prevState.decksById,\n        [deck.id]: {\n          ...prevState.decksById[deck.id],\n\n          learnedRecordsIds: learnedUpdatedRecordsIds.reduce(\n            (prevLearnedRecordsIds, learnedRecordId) => {\n              if (\n                prevLearnedRecordsIds.includes(\n                  learnedRecordId,\n                )\n              ) {\n                return prevLearnedRecordsIds;\n              }\n\n              return prevLearnedRecordsIds.concat[\n                learnedRecordId\n              ];\n            },\n            prevState.decksById[deck.id].learnedRecordsIds,\n          ),\n        },\n      };\n\n      const hasNewLearnedDeck =\n        deck.learnedRecordsIds !== deck.recordsIds &&\n        newDecksById[deck.id].learnedRecordsIds ===\n          newDecksById[deck.id].recordsCount;\n\n      return {\n        ...prevState,\n        appData: {\n          ...prevState.appData,\n\n          learnedRecordsCount:\n            prevState.appData.learnedRecordsCount +\n            learnedRecordsCountChange,\n          learnedDecksCount: hasNewLearnedDeck\n            ? prevState.appData.learnedDecksCount + 1\n            : prevState.appData.learnedDecksCount,\n        },\n        decksById: newDecksById,\n        recordsById: newRecordsById,\n      };\n    });\n  };\n\n  render() {\n    const {\n      page,\n      pageParams,\n      appData,\n      decksById,\n    } = this.state;\n\n    const router = { params: pageParams };\n\n    return (\n      <>\n        {page === 'decks' && (\n          <DecksPage\n            router={router}\n            appData={appData}\n            decks={Object.values(decksById)}\n            getRecordsByDeckId={this.getRecordsByDeckId}\n            onPageChange={this.changePage}\n            onDataImport={this.importData}\n            onDataExport={this.exportData}\n            onDataReset={this.resetData}\n            onDeckCreate={this.createDeck}\n            onDeckDelete={this.deleteDeck}\n          />\n        )}\n        {page === 'deck' && (\n          <DeckPage\n            router={router}\n            deck={decksById[pageParams.deckId]}\n            records={this.getRecordsByDeckId(\n              pageParams.deckId,\n            )}\n            onPageChange={this.changePage}\n            onDeckDelete={this.deleteDeck}\n            onRecordCreate={this.createRecord}\n            onRecordDelete={this.deleteRecord}\n          />\n        )}\n        {page === 'training' && (\n          <TrainingPage\n            router={router}\n            deck={decksById[pageParams.deckId]}\n            records={this.getRecordsByDeckId(\n              pageParams.deckId,\n            )\n              .sort((a, b) => {\n                if (a.lastRepetition < b.lastRepetition) {\n                  return -1;\n                }\n                return 1;\n              })\n              .slice(0, 5)}\n            onPageChange={this.changePage}\n            onFinishTraining={this.updateRecords}\n          />\n        )}\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}